/*****************************************************************//**
 * \file   RSA.cpp
 * \brief  Implement algorithms for RSA
 * 
 * \author dqthebt
 * \date   October 2020
 *********************************************************************/
#include <iostream>
#include <chrono>
#include <time.h>
#include "biginteger.h"
#include "algorithm.h"

using namespace std;

void sleepcp(int milliseconds) // Cross-platform sleep function
{
    clock_t time_end;
    time_end = clock() + milliseconds * CLOCKS_PER_SEC / 1000;
    while (clock() < time_end) {
    }
}

int main()
{
    std::chrono::steady_clock::time_point begin, end;
    Algorithm* algorithm = Algorithm::GetInstance();

    /* Init big number*/
    /*BigInteger a
    BigInteger b("1100010000000111110011100101111000101010101100000000110101110100110111001010100000101011101111010001001110001111011000110010101110111001100100000111101010101110100101011011001111011001000000001000001010001101010011001010011000101110001010000111111111110001110001110011111111011010100001101100111000010011110110110001011010011111011000111111011000110110011000000001010001111000011100101010");*/

    /*BigInteger a
    BigInteger b
    /* Generate big number */
    BigInteger a = algorithm->GenBigInteger(1024);
    sleepcp(1000);
    BigInteger b = algorithm->GenBigInteger(1024);

    std::cout << "a=" << a << std::endl;
    std::cout << "b=" << b << std::endl;

    begin = std::chrono::steady_clock::now();
    std::cout << "a + b     " << a + b << std::endl;
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[탎]" << std::endl;

    begin = std::chrono::steady_clock::now();
    std::cout << "a - b     " << a - b << std::endl;
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[탎]" << std::endl;

    begin = std::chrono::steady_clock::now();
    std::cout << "a%b         " << (a % b) << std::endl;
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[탎]" << std::endl;

    /*std::cout << "MulMod1: " << algorithm->MulMod(BigInteger("10"), BigInteger("111"), BigInteger("11")) << endl;
    begin = std::chrono::steady_clock::now();
    std::cout << "MulMod: " << algorithm->MulMod(BigInteger("10101000000000000000000000000000111111111000000000000000000111101000000000000011111110101011111111111111000000000000000000000111111111111000101111101000000000000011111100011010000111111011111111111110000000000000000000000000111111111111111111010101010010101010101010101001010101001010010010100000000000000000"),
        BigInteger("10101000000000000000000000000000111111111000000000000000000111101000000000000011111110101011111111111111000000000000000000000111111111111000101111101000000000000011111100011010000111111011111111111110000000000000000000000000111111111111111111010101010010101010101010101001010101001010010010100000000000000000"),
        BigInteger("10101000000000000000000000000000111111111000000000000000000111101000000000000011111110101011111111111111000000000000000000000111111111111000101111101000000000000011111100011010000111111011111111111110000000000000000000000000111111111111111111010101010010101010101010101001010101001010010010100000000000000000"\
            "01111010100101101111111111100000101010101010101010101011110000000000000001011111000000000000000000111111111111111100000011111111111111111110000000000000000000010101010111111101000001000010"\
            "11111000000000000000000111111111111111100000011111111111111111110000000000000000000010101010111111101000001000010111111111111111111100001111111100000000"\
            "01111010100101101111111111100000101010101010101010101011110000000000000001011111000000000000000000111111111111111100000011111111111111111110000000000000000000010101010111111101000001000010"\
            "01111010100101101111111111100000101010101010101010101011110000000000000001011111000000000000000000111111111111111100000011111111111111111110000000000000000000010101010111111101000001000010")) << std::endl;
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count() << "[탎]" << std::endl;*/
}